{"version":3,"file":"static/js/531.f807173f.chunk.js","mappings":"+KACA,EAAuB,sBAAvB,EAAuD,yBAAvD,EAAyF,wBAAzF,EAAgI,8BAAhI,EAAyK,0BAAzK,EAAiN,6BAAjN,EAA8P,+BAA9P,EAAwS,0BAAxS,EAA+U,4BCA/U,EAAyB,uBAAzB,EAA4D,0BAA5D,EAA+F,uBAA/F,EAAiI,yBAAjI,EAAqK,yBAArK,EAAqM,qB,mBCuBrM,EApBe,SAACA,GACZ,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,SAAC,KAAD,CAASC,GAAIF,EAAMG,UAAW,qBAAGC,SAA0BC,EAAeA,GAA1E,UACI,iBAAKF,UAAWE,EAAhB,WACI,gBAAKF,UAAWE,EAAhB,UACI,gBAAKF,UAAWE,EAAhB,SACKN,EAAME,QAGf,gBAAKE,UAAWE,EAAhB,SACKN,EAAMO,aCL3B,EARiB,SAACP,GACd,OACI,gBAAKI,UAAWE,EAAhB,SACKN,EAAMQ,W,wCCNNC,EAAqB,SAACC,GAC/B,OAAOA,EAAMC,a,uCCYXC,GAAgBC,EAAAA,EAAAA,IAAU,KAC1BC,GAAaC,EAAAA,EAAAA,IAAU,GAWvBC,GAAyBC,EAAAA,EAAAA,GAAU,CACrCC,KAAM,WADqBD,EATL,SAACjB,GACvB,OACI,kBAAMmB,SAAUnB,EAAMoB,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOd,KAAM,UAAWe,UAAWC,EAAAA,EAAUC,YAAY,qBAAqBC,SAAU,CAACC,EAAAA,GAAYd,EAAeE,MACpH,2CAkDZ,GAAea,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAPkB,SAAClB,GACnB,MAAO,CACHC,YAAaF,EAAmBC,MAKX,CAACmB,WAAAA,EAAAA,IAC1BC,EAAAA,EAFJ,EAzCgB,SAAC9B,GACb,IAAI+B,EAAkB/B,EAAMW,YAAYqB,aAAaC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAQhC,GAAIgC,EAAEhC,GAAIK,KAAM2B,EAAE3B,UACpF4B,EAAmBnC,EAAMW,YAAYyB,cAAcH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAUnC,GAAImC,EAAEnC,GAAIM,QAAS6B,EAAE7B,aAM/F,OACI,iBAAKJ,UAAWE,EAAhB,WACI,gBAAKF,UAAWE,EAAhB,UACI,gBAAKF,UAAWE,EAAhB,SACKyB,OAGT,iBAAK3B,UAAWE,EAAhB,WACI,gBAAKF,UAAWE,EAAhB,UACQ,wCAIR,iBAAKF,UAAWE,EAAhB,WACI,gBAAKF,UAAWE,EAAhB,qBAGC6B,MAEL,gBAAK/B,UAAWE,EAAhB,UACI,SAACU,EAAD,CAAwBG,SAxBzB,SAACmB,GACZtC,EAAM6B,WAAWS,EAAU9B","sources":["webpack://roman-react-app/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://roman-react-app/./src/components/Dialogs/Dialog/Dialog.module.css?19be","components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Messages/Messages.jsx","selectors/dialogsSelectors.js","components/Dialogs/Dialogs.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Dialogs_main__JXPu0\",\"dialogs\":\"Dialogs_dialogs__+UsYO\",\"dialog\":\"Dialogs_dialog__wdgJB\",\"mainMessages\":\"Dialogs_mainMessages__em5N5\",\"messages\":\"Dialogs_messages__+K6lB\",\"messageText\":\"Dialogs_messageText__ENfve\",\"messageTextMe\":\"Dialogs_messageTextMe__QvrHO\",\"userInfo\":\"Dialogs_userInfo__Zfl15\",\"addMessage\":\"Dialogs_addMessage__Ybz-c\"};","// extracted by mini-css-extract-plugin\nexport default {\"active\":\"Dialog_active__keaig\",\"notActive\":\"Dialog_notActive__xXqF7\",\"dialog\":\"Dialog_dialog__tJ7Nx\",\"userLogo\":\"Dialog_userLogo__GCHiF\",\"chatName\":\"Dialog_chatName__hjDPO\",\"logo\":\"Dialog_logo__cEnhr\"};","import React from \"react\";\r\nimport style from './Dialog.module.css'\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Dialog = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (\r\n        <NavLink to={path} className={({ isActive }) => isActive ? style.active : style.notActive}>\r\n            <div className={style.dialog}>\r\n                <div className={style.userLogo}>\r\n                    <div className={style.logo}>\r\n                        {props.id}\r\n                    </div>\r\n                </div>\r\n                <div className={style.chatName}>\r\n                    {props.name}\r\n                </div>\r\n            </div>\r\n        </NavLink>\r\n\r\n    );\r\n}\r\n\r\nexport default Dialog;","import React from \"react\"\r\nimport style from '../Dialogs.module.css'\r\n\r\nconst Messages = (props) => {\r\n    return (\r\n        <div className={style.messageTextMe}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages;","export const getDialogsSelector = (state) => {\r\n    return state.dialogsPage\r\n}","import React from \"react\"\r\nimport style from './Dialogs.module.css'\r\nimport Dialog from \"./Dialog/Dialog\"\r\nimport Messages from \"./Messages/Messages\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../common/FormValidationControl/FormValidationControl\";\r\nimport {isRequired, maxLength, minLength} from \"../../validation/validators\";\r\nimport {getDialogsSelector} from \"../../selectors/dialogsSelectors\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {addMessage} from \"../../redux/dialogsPageReducer\";\r\nimport {withAuthUserRedirect} from \"../../hoc/withAuthUserRedirect\";\r\n\r\nconst maxLength1000 = maxLength(1000)\r\nconst minLength1 = minLength(1)\r\n\r\nconst CreateMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name={'message'} component={TextArea} placeholder=\"Write a message...\" validate={[isRequired, maxLength1000, minLength1]}/>\r\n            <button>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst CreateMessageReduxForm = reduxForm({\r\n    form: 'message'\r\n})(CreateMessageForm)\r\n\r\nconst Dialogs = (props) => {\r\n    let dialogsElements = props.dialogsPage.dialogsArray.map(d => <Dialog id={d.id} name={d.name}/>)\r\n    let messagesElements = props.dialogsPage.messagesArray.map(m => <Messages id={m.id} message={m.message}/>)\r\n\r\n    let onSubmit = (formValue) => {\r\n        props.addMessage(formValue.message)\r\n    }\r\n\r\n    return (\r\n        <div className={style.main}>\r\n            <div className={style.dialogs}>\r\n                <div className={style.dialog}>\r\n                    {dialogsElements}\r\n                </div>\r\n            </div>\r\n            <div className={style.mainMessages}>\r\n                <div className={style.userInfo}>\r\n                        <span>\r\n                            Dialog\r\n                        </span>\r\n                </div>\r\n                <div className={style.messages}>\r\n                    <div className={style.messageText}>\r\n                        Message\r\n                    </div>\r\n                    {messagesElements}\r\n                </div>\r\n                <div className={style.addMessage}>\r\n                    <CreateMessageReduxForm onSubmit={onSubmit}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: getDialogsSelector(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {addMessage}),\r\n    withAuthUserRedirect\r\n)(Dialogs)"],"names":["props","path","id","to","className","isActive","style","name","message","getDialogsSelector","state","dialogsPage","maxLength1000","maxLength","minLength1","minLength","CreateMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","isRequired","compose","connect","addMessage","withAuthUserRedirect","dialogsElements","dialogsArray","map","d","messagesElements","messagesArray","m","formValue"],"sourceRoot":""}